/*
 * generated by Xtext
 */
package org.poc.idm.xtext.wdl.serializer;

import Wdl.Page;
import Wdl.WdlPackage;
import Wdl.Website;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.poc.idm.xtext.wdl.services.WdlGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractWdlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WdlGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == WdlPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case WdlPackage.PAGE:
				sequence_PageRule(context, (Page) semanticObject); 
				return; 
			case WdlPackage.WEBSITE:
				sequence_WebsiteRule(context, (Website) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=ID title=STRING (targets+=[Page|ID] targets+=[Page|ID]*)?)
	 */
	protected void sequence_PageRule(EObject context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (isMobileFriendly?='mobile'? copyright=STRING? pages+=PageRule+)
	 */
	protected void sequence_WebsiteRule(EObject context, Website semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
